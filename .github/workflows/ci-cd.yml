name: CI/CD

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build -- angular-signals

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist/angular-signals
          retention-days: 1

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm test -- --coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npx prettier --check "projects/**/*.{ts,html,css,json}"
        continue-on-error: true

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    if: github.event_name == 'release' && github.event.action == 'created'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build -- angular-signals

      - name: Update package version
        run: |
          cd dist/angular-signals
          npm version ${{ github.event.release.tag_name }} --no-git-tag-version

      - name: Publish to NPM
        run: |
          cd dist/angular-signals
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/angular-signals
          asset_name: angular-signals-${{ github.event.release.tag_name }}.tgz
          asset_content_type: application/gzip
        continue-on-error: true

  publish-gpr:
    name: Publish to GitHub Package Registry
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    if: github.event_name == 'release' && github.event.action == 'created'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build -- angular-signals

      - name: Update package version and name for GPR
        run: |
          cd dist/angular-signals
          npm version ${{ github.event.release.tag_name }} --no-git-tag-version
          # Update package name for GitHub Package Registry
          node -e "const fs=require('fs'); const pkg=JSON.parse(fs.readFileSync('package.json')); pkg.name='@${{ github.repository_owner }}/angular-signals'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));"

      - name: Publish to GitHub Package Registry
        run: |
          cd dist/angular-signals
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
